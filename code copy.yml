AWSTemplateFormatVersion: 2010-09-09
Description: CodePipeline For ECS Fargate Blue/Green Deploy with PlaceHolder
Parameters:
  Env:
    Description: Environment
    Type: String
  System:
    Description: System Name
    Type: String
Resources:
  # CloudwatchEventRole:
  #   Type: AWS::IAM::Role
  #   UpdateReplacePolicy: "Retain"
  #   DeletionPolicy: "Delete"
  #   Properties:
  #     RoleName: !Sub ${Env}--${System}--cloudwatch-event--iar
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - events.amazonaws.com
  #           Action: sts:AssumeRole
  #     Path: /
  #     Policies:
  #       - PolicyName: CloudWatchEventsPipelineExecution
  #         PolicyDocument:
  #           Version: 2012-10-17
  #           Statement:
  #             - Effect: Allow
  #               Action: codepipeline:StartPipelineExecution
  #               Resource: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    Properties:
      RoleName: !Sub ${Env}--${System}--pipeline-cb--iar
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: PipelineCodeBuildAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: "*"
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Effect: Allow
                Resource: !Sub arn:aws:s3:::${CodePipelineArtifactsBucket}/*
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
              - Effect: Allow
                Action:
                  - codebuild:CreateReportGroup
                  - codebuild:CreateReport
                  - codebuild:UpdateReport
                  - codebuild:BatchPutTestCases
                  - codebuild:BatchPutCodeCoverages
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:DescribeImages
                  - ecr:BatchGetImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
                Resource: "*"

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    Properties:
      RoleName: !Sub ${Env}--${System}--pipeline-cp--iar
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: PipelineAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - iam:PassRole
                Resource: "*"
                Effect: Allow
                Condition:
                  StringEqualsIfExists:
                    iam:PassedToService:
                      - ecs-tasks.amazonaws.com
              - Resource:
                  - !Sub arn:aws:s3:::${CodePipelineArtifactsBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Action:
                  - codedeploy:CreateDeployment
                  - codedeploy:GetApplication
                  - codedeploy:GetApplicationRevision
                  - codedeploy:GetDeployment
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:RegisterApplicationRevision
                  - codedeploy:*
                Resource: "*"
                Effect: Allow
              - Action:
                  - elasticbeanstalk:*
                  - ec2:*
                  - elasticloadbalancing:*
                  - autoscaling:*
                  - cloudwatch:*
                  - sns:*
                  - cloudformation:*
                  - rds:*
                  - sqs:*
                  - ecs:*
                Resource: "*"
                Effect: Allow
              - Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuildBatches
                  - codebuild:StartBuildBatch
                Resource: "*"
                Effect: Allow
              - Action:
                  - codestar-connections:UseConnection
                Resource:
                  - Fn::ImportValue: !Sub ${Env}--${System}--code--stack--connections
                Effect: Allow

  CodePipelineArtifactsBucket:
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  # AmazonCloudWatchEventRule:
  #   Type: AWS::Events::Rule
  #   UpdateReplacePolicy: "Retain"
  #   DeletionPolicy: "Delete"
  #   Properties:
  #     EventPattern:
  #       source:
  #         - aws.codeconnections
  #       detail-type:
  #         - GitSync Repository Sync Status Change
  #       resources:
  #         - !Sub "arn:aws:codeconnections:${AWS::Region}:${AWS::AccountId}:connection/{connection-id}"
  #       detail:
  #         event:
  #           - referenceCreated
  #           - referenceUpdated
  #         referenceType:
  #           - branch
  #         referenceName:
  #           - main
  #     Targets:
  #       - Arn: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}
  #         RoleArn: !GetAtt CloudwatchEventRole.Arn
  #         Id: codepipeline-AppPipeline

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    Properties:
      ServiceRole: !Ref CodeBuildServiceRole
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
                - REPOSITORY_URI=${AWS_ACCOUNT_ID}.dkr.ecr.ap-northeast-1.amazonaws.com/${CONTAINER_NAME}
                - IMAGE_TAG=$(echo ${CODEBUILD_RESOLVED_SOURCE_VERSION} | cut -c 1-7)
                - aws ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.ap-northeast-1.amazonaws.com
            build:
              commands:
                - echo Build started on `date`
                - echo Building the Docker image...
                - docker build -t ${REPOSITORY_URI}:latest .
                - docker tag ${REPOSITORY_URI}:latest ${REPOSITORY_URI}:${IMAGE_TAG}
            post_build:
              commands:
                - echo Build completed on `date`
                - echo Pushing the Docker images...
                - docker push ${REPOSITORY_URI}:${IMAGE_TAG}
                - echo Writing imageDetail json...
                - printf '{"Version":"1.0","ImageURI":"%s"}' $REPOSITORY_URI:$IMAGE_TAG > imageDetail.json
          artifacts:
            files: imageDetail.json
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: false
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: CONTAINER_NAME
            Value: "poc/my-app-container"
      Name: !Sub ${Env}--${System}--pipeline-cb

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      Name: !Sub ${Env}--${System}--pipeline
      PipelineType: V2
      ExecutionMode: QUEUED
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactsBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: CodeStarSourceConnection
              Configuration:
                ConnectionArn:
                  Fn::ImportValue: !Sub ${Env}--${System}--code--stack--connections
                FullRepositoryId: "takyshu98/my-app-container"
                BranchName: "main"
                OutputArtifactFormat: "CODE_ZIP"
              RunOrder: 1
              OutputArtifacts:
                - Name: App
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
              RunOrder: 1
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: BuildOutput
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: "1"
                Provider: CodeDeployToECS
              Configuration:
                AppSpecTemplateArtifact: App
                AppSpecTemplatePath: appspec.yaml
                TaskDefinitionTemplateArtifact: App
                TaskDefinitionTemplatePath: taskdef.json
                ApplicationName:
                  Fn::ImportValue: !Sub ${Env}--${System}--ecs-blue-green--stack--cd--app
                DeploymentGroupName:
                  Fn::ImportValue: !Sub ${Env}--${System}--ecs-blue-green--stack--cd--dg
                Image1ArtifactName: BuildOutput
                Image1ContainerName: IMAGE1_NAME
              RunOrder: 1
              InputArtifacts:
                - Name: App
                - Name: BuildOutput
              Region: !Ref AWS::Region
# ------------------------------------------------------------#
# Outputs
# ------------------------------------------------------------#
Outputs:
  PipelinelogicalID:
    Description: logical ID.
    Value: !Ref CodePipeline
