AWSTemplateFormatVersion: "2010-09-09"
Description: ECS Stack
Parameters:
  System:
    Description: System Name
    Type: String
  Env:
    Description: Environment
    Type: String
  Image:
    Description: Image
    Type: String
    Default: "032465545722.dkr.ecr.ap-northeast-1.amazonaws.com/poc/my-app-container:latest"
Resources:
  EcsLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      FieldIndexPolicies: []
      LogGroupClass: STANDARD
      LogGroupName: !Sub /ecs/${System}-${Env}-ecs-td
      DataProtectionPolicy: {}
  EcsCluster:
    Type: AWS::ECS::Cluster
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      ClusterName: !Sub ${System}-${Env}-ecs-cluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      ClusterSettings:
        - Name: containerInsights
          Value: disabled
      ServiceConnectDefaults:
        Namespace: !Sub ${System}-${Env}
      Tags:
        - Key: Name
          Value: !Sub ${System}-${Env}-ecs-cluster
  EcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      ExecutionRoleArn:
        Fn::GetAtt:
          - "EcsTaskExecutionRole"
          - "Arn"
      RuntimePlatform:
        OperatingSystemFamily: "LINUX"
        CpuArchitecture: "X86_64"
      Volumes: []
      InferenceAccelerators: []
      Memory: "1024"
      PlacementConstraints: []
      ContainerDefinitions:
        - ExtraHosts: []
          Secrets: []
          VolumesFrom: []
          Cpu: 0
          EntryPoint: []
          DnsServers: []
          Image: !Ref Image
          Essential: true
          LogConfiguration:
            SecretOptions: []
            Options:
              awslogs-group: !Ref EcsLogGroup
              mode: "non-blocking"
              max-buffer-size: "25m"
              awslogs-create-group: "true"
              awslogs-region: "ap-northeast-1"
              awslogs-stream-prefix: "ecs"
            LogDriver: "awslogs"
          ResourceRequirements: []
          EnvironmentFiles: []
          Name: !Sub ecs-container
          MountPoints: []
          DependsOn: []
          DockerLabels: {}
          PortMappings:
            - ContainerPort: 3000
              AppProtocol: "http"
              Protocol: "tcp"
              HostPort: 3000
              Name: !Sub ${Env}--${System}--container--3000--tcp
          DockerSecurityOptions: []
          SystemControls: []
          Command: []
          DnsSearchDomains: []
          Environment: []
          Links: []
          CredentialSpecs: []
          Ulimits: []
      Cpu: "512"
      RequiresCompatibilities:
        - "FARGATE"
      Family: !Sub ${System}-${Env}-ecs-td
      NetworkMode: "awsvpc"
      Tags:
        - Key: Name
          Value: !Sub ${System}-${Env}-ecs-td
  EcsTaskExecutionRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      MaxSessionDuration: 3600
      RoleName: !Sub ${System}-${Env}-role-ecs-task-execution
      AssumeRolePolicyDocument:
        Version: "2008-10-17"
        Statement:
          - Action: "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
            Sid: ""
  EcsService:
    Type: AWS::ECS::Service
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Cluster: !Ref EcsCluster
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Base: 0
          Weight: 1
      TaskDefinition: !Ref EcsTaskDefinition
      ServiceName: !Sub ${System}-${Env}-ecs-sv
      SchedulingStrategy: REPLICA
      DesiredCount: 1
      AvailabilityZoneRebalancing: ENABLED
      LoadBalancers:
        - ContainerName: !Sub ecs-container
          ContainerPort: 3000
          LoadBalancerName: !Ref AWS::NoValue
          TargetGroupArn: !Ref TargetGroup
      HealthCheckGracePeriodSeconds: "30"
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub ${System}-${Env}-network-stack-sg-id
          Subnets:
            Fn::Split:
              - ","
              - Fn::ImportValue: !Sub ${System}-${Env}-network-stack-public-subnet-ids
      PlatformVersion: LATEST
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DeploymentController:
        Type: ECS
      ServiceConnectConfiguration:
        Enabled: false
      Tags: []
      EnableECSManagedTags: true
    DependsOn:
      - Listener
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Type: application
      Name: !Sub ${System}-${Env}-alb-web
      SecurityGroups:
        - Fn::ImportValue: !Sub ${System}-${Env}-network-stack-sg-id
      Subnets:
        Fn::Split:
          - ","
          - Fn::ImportValue: !Sub ${System}-${Env}-network-stack-public-subnet-ids
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      HealthCheckPath: /
      Name: !Sub ${System}-${Env}-elb-tg-web
      Port: 3000
      Protocol: HTTP
      TargetType: ip
      HealthCheckProtocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub ${System}-${Env}-network-stack-vpc-id
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "300"
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
