AWSTemplateFormatVersion: "2010-09-09"
Description: The template used to create an ECS Service from the ECS Console.
Parameters:
  ECSClusterName:
    Type: String
    Default: poc
  ECSServiceName:
    Type: String
    Default: my-app-container-service
  SecurityGroupIDs:
    Type: CommaDelimitedList
    Default: sg-083a0651e03350886
  SubnetIDs:
    Type: CommaDelimitedList
    Default: subnet-0b6a10d5bbda8a2b1,subnet-0cbce22b56e4ce67d
  VpcID:
    Type: String
    Default: vpc-0e09d49bebcafd250
  LoadBalancerName:
    Type: String
    Default: my-app-container-alb
Resources:
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSClusterName
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Base: 0
          Weight: 1
      TaskDefinition: !Ref TaskDefinition
      ServiceName: !Sub ${Env}--${System}--esv
      SchedulingStrategy: REPLICA
      DesiredCount: 1
      AvailabilityZoneRebalancing: ENABLED
      LoadBalancers:
        - ContainerName: my-app-container
          ContainerPort: 3000
          LoadBalancerName: !Ref AWS::NoValue
          TargetGroupArn: !Ref TargetGroup
      HealthCheckGracePeriodSeconds: "30"
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: !Ref SecurityGroupIDs
          Subnets: !Ref SubnetIDs
      PlatformVersion: LATEST
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DeploymentController:
        Type: ECS
      ServiceConnectConfiguration:
        Enabled: false
      Tags: []
      EnableECSManagedTags: true
    DependsOn:
      - Listener
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Name: !Sub ${Env}--${System}--alb
      SecurityGroups: !Ref SecurityGroupIDs
      Subnets: !Ref SubnetIDs
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /
      Name: !Sub ${Env}--${System}--tg
      Port: 3000
      Protocol: HTTP
      TargetType: ip
      HealthCheckProtocol: HTTP
      VpcId: !Ref VpcID
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "300"
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 3000
      Protocol: HTTP
